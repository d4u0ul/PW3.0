"O primeiro passo do aprendizado é a confusão"

Roteiro do aquecimento PSW 3.0
* Variaveis
Primeiro cria-se um ambiente virtual python na sua máquina
-pra quê precisa disso?
Ambientes virtuais são copias das instalações dos interpretadores que estão na máquina, por exemplo o python 3.7, pode ser que essa instalação seja  modificada e muitas vezes não queremos que projetos estejam vinculados à instalação principal do compilador/interpretador que temos na máquina que pode ser, por exemplo, atualizada.
Então para cada projeto que estejamos criando, devemos criar um novo ambiente virtual.


python3 -m venv venv

python3: chame o python
-m: passe parâmetros
venv: crie um virtualEnv
venv: nome que eu dou para o meu interpretador python(padrão é venv)

após isso, algumas pastas e subpastas são criadas com várias configurações pré-definidas de um ambiente virtual
Depois disso precisamos informar que sempre que quisermos rodar um código, este deverá ser feito por meio desta cópia(venv) do interpretador por meio do comando abaixo

source venv/bin/activate (linux)
venv\scripts\activate(windows)

daí aparece a palavra(venv) para dizer que o venv foi ativado e está rodando
-Tipos de dados 
-Entrada de dados

nome = input("Digite o seu nome: ")
print(f"O seu nome é {nome}")
 
Para outras linguagens de programação que não o python constantes são escritas com letras maiúsculas e não podem ser alteradas após serem definidas, no python mesmo sendo escritas com as letras maiúsculas elas podem ser alteradas a PEP8(guias de estilo) que indica a utilização de letras maiúsculas para constantes para que fique mais fácil apra outros desenvolvedoores consigam ler o código com mais clareza 

Arredondamento de variáveis
from math import ceil(arredonda para cima), floor(arredonda para baixo) 

-Conversão de dados

print(3+2) ==> 5
print(3-2) ==> 1
print(3/2) ==> 1.5
print(3//2) ==> 1 (divisão por inteiro)
print(3%2) ==> 1 
print(3*2) ==> 6
print(3**2) ==> 9
print(9**(1/2)) ==> 3

-laço de repetição
break finaliza  a repetição


1) Iniciando o projeto

primeiro vamos instalar o django(framework) e o pillow(biblioteca que o django usa para manipular imagens)

agora precisamos startar o nosso projeto django. A partir do momento que temos o django instalado, basta rodarmos:


django-admin startproject freelaway .

Onde são respectivamente comandoDjango inicializaProj nomeDoProjeto pontoQuaMostraOndeComeçaOProj

Após fazer isso o Django cria todo o projeto para nós dentro da pasta nomeDoProjeto, mostrando toda uma estrutura básica independente do qual pequeno ou grande esse projeto seja, por ex:

2)Arquivos do projeto Django
O settings.py é o arquivo de configuração e é com ele que conseguimos definir algummas configurações básicas do nosso projeto por exemplo:
DEBUG: que quando estiver 'True' nós estamos em modo de desenvolvimento e quando ela estiver em false, nós já a colocamos em produção 
ALLOWED_HOSTS: são as máquinas que podem acessa o meu aplicativo 
SECRET_KEY: utilizada para fazer hash e criptografia 
DATABASES: Digamos qeu estamos utilizando o MYSQL e de repente precisamos mudar para o POSTGREE ou SQLITE não precisamos mexer em nada do projeto, precisaremos apenas mudar essa variável
LANGUAGE_CODE: "pt-BR"
TIME_ZONE: "America/Sao_Paulo"


O urls.py é onde definimos as rotas da nossa aplicação exemplo


url/login
url/home
url/cadastro

Quando acessamos uma determinada rota ele exibe algo de diferente para cada página requerida

O wsgi.py é o web server gate interface usado no deploy da aplicação
O asgi.py é parecido mas é usado apra uma aplicação assíncrona

e por último temos o manage.py qye é o nosso cli(command line interface) é como se fosse um programa, mas em vez de uma interface gráfica quando pedimos uma ação para o programa , ele executará uma ação dada pela linha de comando.
Ao executarmos o arquivo manager.py podemos por exemplo inicializar o servidor com o comando runserver:

    $python3 manager.py runserver

ao acessarmos o caminho definido como URI(http://127.0.0.1:8000/) do servidor que está rodando temos acesso a tela do Django quando não tem nada instalado

3) Configurando os arquivos estáticos


Devemos copiar as configurações pré-determinada no projeto 
STATIC_URL = '/static/' #url para acessá-los
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),) #quais pastas eles vão ficar
STATIC_ROOT = os.path.join('static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

Os arquivos estáticos são por exemplo a Logo do sistema, os css, javascripts ou seja os arquivos que não são dinâmicos, que vão estar na aplicação estarão nos arquivos estáticos


4 passo - criação de um App (dividir para conquistar)

 Vamos dividir o nosso problema gigante em pequenos problemas, então para cada um dos nossos problemas devemos criar um App, por ex:
 -login
 -cadastro
 -recuperação de senha
 -listagem dos jobs
 -perfil do usuário

Para inicializar um App é muito simples, basta digitar o comando

    $python3 manage.py startapp autenticacao (no windows é python)

indicando o nome do app no final
Quando rodamos o comando acima, o django cria uma nova pasta(autenticacao) no projeto com os arquivos que serão necessários para rodar aquele app. 
Ao criar um app, devemos informar ao Django da criação deste app nos arquivos 

    * freewlaway/settings.py adicionando na tag Application definition os INSTALLED_APPS


        INSTALLED_APPS = [
            'django.contrib.admin',                                     #app que já vem como padrão no Django    
            'django.contrib.auth',                                      #app que já vem como padrão no Django    
            'django.contrib.contenttypes',                              #app que já vem como padrão no Django            
            'django.contrib.sessions',                                  #app que já vem como padrão no Django        
            'django.contrib.messages',                                  #app que já vem como padrão no Django        
            'django.contrib.staticfiles',                               #app que já vem como padrão no Django            
            'autenticacao',                                             #app que criamos e adicionamos manualmente
        ]

    *frewlaway/urls.py - adicionando em urlpatterns criando um caminho para quando o meu usuário acessá-lo ele caia na minha aplicação 

        urlpatterns = [
            path('admin/', admin.site.urls),                #url padrão do django
            path('auth/', include('autenticacao.urls'))     #url que adicionamos, mas q ainda não existe na pasta de autenticação, devemos criá-lo
        ]

    *autenticacao/urls.py - perceba que o arquivo urls.py não existe dentro da pasta autenticacao, logo devemos criá-lo e em criar uma estrutura igual ao urls.py do   freewlaway.

            from django.urls import path

            urlpatterns = [
            ]

        * note que o problema autenticação ainda é muito grande com cadastro, login, senha, recuperação
        * quando o usuário acessar meudominio/auth ele acessa o app auth, mas para acessar as subrotas com os subproblemas de auth ele deve acessar outros paths que são derivações do /path e que devem ser colocadas dentro de urls.py de autenticacao/
        * o django segue um padrão de arquitetura de software chamado mvt(model-view-template)
            -model: arquivo model onde vai ficar uma camada da aplicação, ou seja um arquivo onde vai ficar separado tudo que for relacionado a conexão,pesquisa, inserção de banco de dados
            -view: arquivo view, onde vai ficar a lógica da nossa aplicação, onde fica toda aquela parte onde recebemos uma request e retornamos uma response, logo pegar o nome do usuário e verificar se ele existe, ou um e-mail/senha válido/inválido todo esse processamento fica aqui.
            -template: arquivo template, que é de fato a interface que o usuário vai receber as informações que no nosso caso, seria o html, onde se tem imagens, botões, campos para o usuário interagir.

        * Quando um usuário acessa uma rota, eu quero que ele seja redirecionado para uma view que é uma função do python que vai receber uma requisição pedida do usuário e vai devolver um response com o conteúdo do que o usuário pediu como resposta, logo devemos fazer o import do arquivo views para dentro o autenticacao/urls.py

            from django.urls import path
            from . import views #import do arquivo views

            urlpatterns = [
                path('cadastro/', views.cadastro, name = 'cadastro') # onde temos:  caminhoDoPath, funçãoDentroDeViews, nomeDaRota
            ]
        
    *autenticacao/views.py - não devemos esquecer de criar a função cadastro dentro da views.py que é a função que deve retornar o response da request no path auth/cadastro


        from django.http import HttpResponse #é preciso iportar o response da função cadastro
        def cadastro(request):
            return HttpResponse('cadastro')

Vamos ver se está funcionando:

Após isso, rodamos o servidor de novo e podemos testar no navegador outra vez
Ao acessarmos a página vazio(http://127.0.0.1:8000/) não funciona nada, pois não configuramos para que o django pudesse exibir algo nessa url.
Se acessarmos a página auth/(http://127.0.0.1:8000/auth/) também não funciona pois não criamos nenhuma view para este caminho, na realidade este caminho só direciona para autenticacao/urls.py 
Mas perceba que dentro do (http://127.0.0.1:8000/auth/) temos uma outra rota(http://127.0.0.1:8000/auth/cadastro/) que ela sim tem uma view(httpresponse) definida que pode ser exibida 

4 passo - criação sozinho de uma rota login

    add uma nova urlpattern em autenticacao/urls.py para a rota login/

        urlpatterns=[
            ...
            path('login/', login.views, name='login'),
        ]
    add uma nova função em views chamada login que retorna o response da chamada no link /auth/login/

        def login(request):
            return HttpResponse('login')

Perceba que até agora nós apenas retornamos strings nas requests, mas num projeto real o que queremos retornar são páginas e elementos web.
para isso, precisamos renderizar o html com uma função que já vem importada 

    from django.shortcus import render  # dentro de autenticacao/views

Trocando agora a HttpResponse de views.cadastro() pela função render temos:

    def cadastro(request):
        return render(request, 'cadastro.html')

    Na função render precisamos saber qual foi a requisição do usuário, o caminho do template html('cadastro.html'). 
    Por padrão o django procura esse arquivo html dentro de uma pasta chamada templates(autenticacao/templates/cadastro.html), logo devemos criar a pasta 'templates' e o arquivo 'cadastro.html'

5º passo - Vc já viu que muitos sites têm partes da página que se repetem durante as navegações como barra de navegação e rodapé da página. Isso quer dizer que temos de para todas as páginas dentro do projeto, teremos que criar repetidamente essa parte da página em html? não, para isso criamos um arquivo chamado base.html onde colocamos todas as partes do html que sejam comuns em vários arquivos e no arquivo cadastro.html ou login.html a gnt só estende o base e o padrão fica no base.html e assim não precisamos repetir o mesmo código. 

Para criar um base.html, precisamos criar uma pasta de templates no core do nosso projeto(freewlaway) 
No arquivo freelaway/settings nós encontramos uma constante chamada TEMPLATES. Essa constante é uma lista de dicionários e em cada dicionário nós temos uma lista chamada DIRS on devemos colocar DIRS =[os.path.join()]. O os.path.join()  basicamente faz uma concatenação das 2 partes que ele está juntando, no caso os 2 caminhos(path), pórem se colocássemos apenas uma concatenação comum (+) teríamos algumas incompatibilidades dependendo do sistema em que o código rodar, por exemplo o linux tem como separador de pastas "/" e o windows "\" o os.path.join() faz essa configuração do jeito certo de se escrever o caminho para nós.
Assim, devemos concatenar BASE_DIR{que é uma variável do próprio settings que referencia o lugar no OS onde o código está sendo rodado} com a pasta templates na raiz principal do projeto PS3.0/templates

    DIRS = [os.path.join(BASE_DIR,"templates")]

depois disso, criamos a pasta e o arquivo PS3.0/templates/base.html
para não nos preocuparmos muito com o front end desta parte do projeto, podemos ir diretamente no site do bootstrap getbootstrap.com e pegar um já feito em docs o starter template.
==============================================================================================================
<!doctype html>
<html lang="en">

<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    {% block 'head' %} 
    {% endblock %}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css">
    <title>{% block 'title' %}{% endblock %}</title>
</head>

<body class="fundo">
    {% block 'body' %}{% endblock %}
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js">

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>
==============================================================================================================

O código está disponível com algumas pequenas diferenças no pdf. As principais estão nos blocos do django que forma adicionados ao código do bootstrap, sendo eles 

{% block 'head' %}

{% endblock %}

Um block do django é uma tag que tudo que eu quiser colocar nessa tag chamada 'head' ou seja estendê-la de outro lugar ou colocá-la em algum outro lugar, essas tags serão substituídas pelo que eu quero colocar no lugar, por exemplo a tag titile que vai substituir o título

    {% block 'title' %}{% endblock %}

e todo o resto, ele mantém.
Voltando para o cadastro.html, devemos apagar tudo e mandar ele estender de base.html para não ficar repetindo o código base da aplicação.

    {% extends 'base.html' %}
    
    e também devemos dizer o que e onde queremos colocar, nesse caso estamos colocando a plavra TESTE no body.
    {% block 'body' %}
        <h1>
        TESTE
        </h1>
    {% endblock %}

    além disso tbm podemos definir o título da página com o block title

    {%block 'title'%}
        Cadastro | freewlaway
    {%endblock%}



6ºpasso - desenvolva o cadastro.html 
Há um exemplo feito no pdf com todos os blocks que precisamos adicionar no cadastro.html

=======================================================================================================

{% extends 'base.html' %}
{% load static %}

{% block 'head' %}
<link rel="stylesheet" href="{% static 'autenticacao/css/cadastro.css' %}">
{% endblock %}

{% block 'body' %}
<div class="box">
<form>
<h1 class="titulo font-degrade borda-bottom-degrade">INSCREVA-SE</h2>
<br>
<span class="span-descricao">Nome de usuário:</span>
<input type="text" class="form-control input-cadastro" name="username">
<br>
<span class="span-descricao">Senha:</span>
<input type="password" class="form-control input-cadastro" name="password">
<br>
<span class="span-descricao">Confirmar senha:</span>
<input type="password" class="form-control input-cadastro" name="confirm-password">
<br>
<input type="submit" value="CADASTRAR" class="btn btn-success btn-lg">
<a href="#" class="btn btn-primary btn-lg">LOGIN</a>
</form>
</div>
{% endblock %}

=======================================================================================================

7º passo - crie e desenvolva o cadastro.css

O html é o responsável pelo o que que é exibido para o usuário e o css é como que isso será exibido para o usuário, então é lá que definimos a cor de fundo o tamanho das letras, posição, cor de botão etc.
Dentro de PS3.0/templates crie uma pasta chamada 'static/'
Lembre-se que dentro de freewlaway/settings.py temos as configurações dos arquivos estáticos e dentre as diretrizes, temos o STATICFILES_DIRS que informa ao django onde ele vai procurar os arquivos estáticos do projeto

    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),)

Logo, quando criamos a pasta static dentro de templates, estamos criando o caminho que o settings estava indicando.
Dentro de static devemos separar os arquivos estáticos por app e tipo(css,img,js), logo devemos criar dentro da pasta static os caminhos

    templates/static/autenticacao/css
    templates/static/autenticacao/img
    templates/static/autenticacao/js

para colocarmos os arquivos correspondentes nestes exatos caminhos.

Criada a estrutura de pastas, criamos o arquivo cadastro.css no caminho correspondentes aos arquivos .css do app autenticacao, ou seja 

    templates/static/autenticacao/css/cadastro.css

Veja que não basta apenas criar o arquivo css numa estrutura bem organizada como esta que está acima, tbm devemos dizer ao arquivo .html onde ele vai buscar o arquivo .css que este irá consumir. Assim, devemos importar o .css para o arquivo html e perceba que já o fizemos quando utilizamos a linha de código do django:

    {% load static %}
    Essa linha acima, importa o static do settings.py (projeto principal do django) e o esse , por sua vez tem uma tag que diz onde estão os arquivos static do projeto

        STATICFILES_DIRS = (os.path.join(BASE_DIR, 'templates/static'),)
    
    Daí, dentro do html, dentro do block 'head' trazemos o link do arquivo css que está em static/autenticacao/css/cadastro.css

        {% block 'head'%}
            <link rel = "stylesheet" href = "{% static 'autenticacao/css/cadastro.css' %}">
        {%endblock%}

O arquivo cadastro.css já tem um exemplo que só basta copiar e colocar

===========================================================================================

.fundo{
background-color: #222;
color: white;
}
.box{
background-color: #444;
width: 500px;
padding: 40px;
position: absolute;
top: 50%;
left: 50%;
transform: translate(-50%,-50%);
box-shadow: 0 0px 20px 0 rgba( 255, 207, 0, 0.3 );
}

===========================================================================================

8º passo - alterar a view para diferenciar GET e POST :

Basicamente, o HTTP que é o protocolo que define como que os websites se comportam através de chamadas de request e response. O HTTP define alguns verbos de ação, tais como: 

    -GET: é quando fazemos requisições via URL do nosso navegador, qando fazemos requisições, normalmente queremos como resposta um arquivo html para podermos exibi-lo para o usuário que fez o request.
    -POST: Quando fazemos uma requisição via POST que é um tipo de requisição feita com formulário, aí não queremos receber uma página html, mas sim queremos fazer algum processamento com as informações que vêm no formulário, tais como mudar um registro num BD ou guardar o valor de uma variável para ser utilizada no processamento de alguma informação que será exibida logo após. 
    -PUT:  
    -DELETE


Uma função que verifica se o request que estamos fazendo é um get ou um post deve verificar o tipo de requisição e de acordo com o tipo feito deve tomar uma atitude. Há m exemplo no pdf de apoio, como está abaixo:

def cadastro(request):
    if request.method == "GET":
        return render(request, 'cadastro.html')
    elif request.method == "POST":
        return HttpResponse(recebido)

Observe que para o cadastro apenas precisaremos do get para entregar a página cadastro.html e depois do post para pegar os dados que foram escritos no formulário que está disponibilizado no arquivo cadastro.html
Mas, ainda não temos definido no cadastro.html como/onde utilizaremos o POST, por isso devemos devemos dentro do form criar um action que definirá para onde irão as informações escritas naquele form:

    <form action ="{%url 'cadastro' %}" method ="POST">

Ao darmos f5 tudo funcionará perfeitamente, pois estamos fazendo um GET que está certo, mas se tentarmos apertar o botão CADASTRAR, veremos um erro de :

    '''
    Forbidden (403)
    CSRF verification failed. Request aborted.

    You are seeing this message because this site requires a CSRF cookie when submitting forms. This cookie is required for security reasons, to    ensure that your browser is not being hijacked by third parties.

    If you have configured your browser to disable cookies, please re-enable them, at least for this site, or for “same-origin” requests.
    def cadastro(request):
    '''
    Esse é um erro  de cross side request foreign, o que seria mais ou menos uma tentativa de falsificação de formulário. Então, caso não estivéssemos usando o djando, nós deveríamos nos preocupar com uma série de coisas para deixar o nosso sistema seguro, mas no django ele já toma conta de tudo para nós.
    Para resolver o problema basta:

    <form action ="{%url 'cadastro' %}" method ="POST">{% csrf _token%}

    Ao, com o apertar do botão CADASTRAR, executar o POST, a página nos devolve a string "recebido" , podendo nos devolver outra página se quisermos configurar.
    Com as informações do form, podemos trabalhar com as variáveis dentro do framework do django com os nomes extraídos do form dentro de cadastro.html:
        username
        password
        confirm-password
    
def cadastro(request):
    if request.method == "GET":
        return render(request, 'cadastro.html')
    elif request.method == "POST":
        username = request.POST.get('username')
        senha = request.POST.get('password')
        confirmar_senha = request.POST.get('confirm-password')
        #print (f"{username}|{senha}|{confirmar-password}")
        return HttpResponse('Recebido')

Ao escrevermos os valores no formulário, ele retorna a impressão no terminal do vscode

9ºpasso - fazer validações

    1º ver se senha e confirmar_senha são iguais e se não forem, devemos redirecionar para a página de cadastro com um outro import do shortcuts chamado redirect.

    form django.shortcus impor render,redirect

        if not senha == confirmar_senha:
            return redirect("/auth/cadastro")

    2º verificar se o username e/ou senha são vazios ou espaços em branco(strip)

        if len(username.strip()) ==0 or len(senha.strip())==0:
            return redirect("/auth/cadastro")

    3º verificar se o usuário já existe
        O django já traz pra nós um app de autenticação chamado auth, então a gnt não precisa criar do zero um app de autenticação.
        Para trazê-lo para a sua aplicação usamos no autenticacao/views.py o import de 

            from django.contrib.auth.models import User 

        Esse import vem do PSW3.0\venv\Lib\site-packages\django\contrib\auth\models.py em uma classe chamada de User. Essa classe é uma "model", ou seja ela referencia o nosso bd, então é possível acessar o bd para verificar a existência de um usuário no bd.

        user = User.objects.filter(username = username)
        if user.exists:
            return redirect("/auth/cadastro")

        percebe-se que esse lógica acima ainda não funciona, pois ainda não criamos essas tabelas no bd e nem precisamos, o próprio django cria e apenas nos passa o arquivo(PS3.0/db.sqlite3) que salvará todas as migrações de db necessárias.
        Um aplicativo desktop bom para verificar e explorar bases de dados do sqlite é o DbBrowser, ao utilizá-lo para verificar o arquivo PS3.0/db.sqlite3 verificamos que não existe nenhuma tabela criada dentro do arquivo do sqlite.
        Como dito o Django cria essas tabelas automaticamente e como temos o app django.contrib.auth as tabelas reacionadas com esse app já são criadas através de um comando no prompt definido abaixo:

        $ python manager.py migrate
        *No powershell deu erro de acesso ao python que não era o venv, então abri um prompt de git bash e executei um venv e funcionou

        Agora, ao dar F5 no dbbrowser vemos que foram criadas 11 tabelas linkadas com o app de auth do django.
        Uma dessas tabelas é o auth_user que tem várias coisas como pass, last_login, is_superuser,username etc.
        É esse username que utilizamos para verificar se o usuário já existe no sistema.

        Um outro comando interessante é o de criação de um superusuário

            python3 manage.py createsuperuser

        são perguntados os dados desse superuser e é criado o superuser.
        Se olharmos no dbBrowser podemos enxergar esse superuser
        dadau/dadau

        Há uma url em freewlaway/urls.py que já vem como padrão para podermos acessar que é a do caminho "admin/". Essa url permite os superusers(usuários q são superuser) acessarem e gerirem todo o sistema. 

10º passo - salvar o dado no banco de dados

A gnt vai criar um try para tratar a execessão que pode ocorrer durante a inserção de algo no banco de dados
para inserir usamos o método de objects chamado create_user e passamos o nome do usuário e a senha capturada pelo forms, então dentro do try colocamos

    user = User.objects.create_user(username = username, password = senha)

e depois mandamos salvar no bd

    user.save()

caso dê errado e o except entre em ação, podemos apenas voltar para a página de cadastro ou se quisermos, podemos criar uma página de erros que pode ser redirecionada sempre que precisarmos.

11º redirecionar para a página de login no botão de login de cadastro.html

é só modificar o valor de 
    
    <a href ="#"class "btn btn-primary btn-lg">LOGIN</a>
    
    para 
    
    <a href "{% url 'login'%}" class "btn btn-primary btn-lg">LOGIN</a>

12º preparando as mensagens de erro>:

A página de se increver quando cometemos erros não está mostrando qual o erro que está acontecendo e o django tem por padrão um app para trabalhar com essas menssagens, precisando apenas adicionar no arquivo freewlaway/settings.py a tag de menssagem:

   
    from django.contrib.messages import constants

    MESSAGE_TAGS = {
    constants.DEBUG: 'alert-primary',
    constants.ERROR: 'alert-danger',
    constants.SUCCESS: 'alert-success',
    constants.INFO: 'alert-info',
    constants.WARNING: 'alert-warning',
    }

Se verificarmos no site oficial do bootstrap, já temos alertas muito bem feitos como padrão no bootstrap
Então pra cada local dentro de views.cadastro() que pode ocorrer um erro, nós teremos que adicionar a mensagem correspondente ao erro, por exemplo:

    from django.contrib import messages
    from django.contrib.messages import constants
    
    if not senha == confirmar_senha:                                               #esse if e todos os outros           
        messages.add_message(request,constants.ERROR, 'As senhas não coincidem')
        return redirect('/auth/cadastro')
    #...
Mas o html ainda não mostra esse erro na tela, para isso devemos ir em cadastro.html e exibir essas mensagens através de umas tags do djangoo dentro do arquivo html:

    {% if messages %}                               #if no django
        {% for message in messages %}               #for no django
            <div class="alert {{message.tags}}">    #impressão no django
                {{message}}                         #msg
            </div>                                  #fecha impressão
        {% endfor %}                                #fecha for
    {% endif %}                                     #fecha if

13º passo criação do login.html
primeiro devemos ir em view e consertar o return da função login() para o retorno de uma página html

    login():
        return render(request,"login.html") 

Agora cria-se a página em autenticacao/login.html e desenvolve-se o código html

    {% extends 'base.html' %}
    {% load static %}

    {% block 'head' %}
    <link rel="stylesheet" href="{% static 'autenticacao/css/cadastro.css' %}">
    {% endblock %}

    {% block 'body' %}
    <div class="box">
        <form action="{% url 'login' %}" method="post">{% csrf_token %}
            <h1 class="titulo font-degrade borda-bottom-degrade">LOGIN</h2>
                <br>
                <span class="span-descricao">Nome de usuário:</span>
                <input type="text" class="form-control input-cadastro" name="username">
                <br>
                <span class="span-descricao">Senha:</span>
                <input type="password" class="form-control input-cadastro" name="password">
                <br>
                <input type="submit" value="LOGIN" class="btn btn-success btn-lg">
                <a href="{% url 'cadastro' %}" class="btn btn-primary btn-lg">CADASTRO</a>
        </form>
    </div>
    {% endblock %}

Perceba que o login.html tem o mesmo css do cadastro.html pq eles são bem parecidos 

14º passo autenticação do usuário

para fazer a autenticação do usuário, precisamos colocar no views.login() a lógica de fazer algo quando receber a requisição GET e POST, send quando receber o GET em login entregar a página login.html e quando receber o POST verificar se o usuário existe de verdade.
Logo, criamos um objeto "user" com um método que retorna um objeto caso ele ache alguém com esse usuário e senha

        usuario = auth.authenticate(username=username, password=senha)

Se o usuário retornar NULL, exiba a mensagem 

        if not usuario:
            messages.add_message(request,constants.ERROR, 'usuário ou senha inválidos')
            return redirect("/auth/login")

Se o usuário retornar um objeto, faça o login e retorna uma string recebido

        else:
            auth.login(request, usuario)
            return redirect("/plataforma")

15º passo - verificar se o usuário já está logado
Se o usuário tentar acessar de novo, mesmo logado no sistema, ele consegue acessar a página de login
Então devemos em todos os apps antes de exibir a tela, ou seja de entregar uma página pedida pelo GET, devemos verificar se o usuário já não está logado. Como atpe agora só temos o app autenticacao, colocamos nas 2 funções (cadastro(),login())do seu views .

    if request.user.isauthenticated:
        return redirect('/plataforma')

16º passo - relizar o logout do usuário criando uma url para STATIC_ROOT
Nós criamos o cadastro/, login/, e agora vamos criar o sair/ nos paths do urlpatterns em autenticacao.urls.py

    urlpatterns=[
        ...
        path('/sair', views.sair,name="sair")
    ]
e criamos dentro de views a função sair

def sair(request):
    auth.logout(request) #realmente faz o logout retirando da memória do navegador os cokies que ainda mantinham o usuário logado
    return redirect ('/auth/login') #manda para a página de login

Se tentarmos logar de novo agora conseguiremos tranquilamente, pois o usuário fi realmente deslogado com sistema com auth.logout()
